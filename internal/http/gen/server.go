// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /books)
	FindBooks(ctx echo.Context, params FindBooksParams) error

	// (POST /books)
	AddBook(ctx echo.Context) error

	// (DELETE /books/{id})
	DeleteBook(ctx echo.Context, id int64) error

	// (GET /books/{id})
	FindBookById(ctx echo.Context, id int64) error

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindBooks converts echo context to params.
func (w *ServerInterfaceWrapper) FindBooks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindBooksParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindBooks(ctx, params)
	return err
}

// AddBook converts echo context to params.
func (w *ServerInterfaceWrapper) AddBook(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddBook(ctx)
	return err
}

// DeleteBook converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBook(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBook(ctx, id)
	return err
}

// FindBookById converts echo context to params.
func (w *ServerInterfaceWrapper) FindBookById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindBookById(ctx, id)
	return err
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/books", wrapper.FindBooks)
	router.POST(baseURL+"/books", wrapper.AddBook)
	router.DELETE(baseURL+"/books/:id", wrapper.DeleteBook)
	router.GET(baseURL+"/books/:id", wrapper.FindBookById)
	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

